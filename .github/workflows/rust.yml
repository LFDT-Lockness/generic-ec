name: Rust

on:
  pull_request:
    branches: [ "*" ]

env:
  CARGO_TERM_COLOR: always
  CARGO_NET_GIT_FETCH_WITH_CLI: true

jobs:
  check-nostd:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: "true"
    - name: Check no-std
      run: cargo check -p generic-ec --no-default-features
  check-alloc:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: "true"
    - name: Check with `alloc` only
      run: cargo check -p generic-ec --no-default-features --features alloc
  check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: "true"
    - name: Check all-features
      run: cargo check -p generic-ec --all-features
  check-all:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: "true"
    - name: Check everything
      run: cargo check --all-targets
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: "true"
    - name: Run tests
      run: cargo test --all-features --workspace
  fmt:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Check formatting
      run: cargo fmt --all -- --check
  clippy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: "true"
    - name: Run clippy
      run: cargo clippy --all --lib --workspace --all-features --exclude generic-ec-tests -- --no-deps -D clippy::all -D clippy::unwrap_used -D clippy::expect_used
  clippy-nostd:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: "true"
    - name: Run clippy no-std
      run: cargo clippy -p generic-ec --no-default-features -- -D clippy::all
  clippy-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: "true"
    - name: Run clippy tests
      run: cargo clippy --workspace --tests --all-features -- -D clippy::all
  check-doc:
    runs-on: ubuntu-latest
    steps:
    - uses: dtolnay/rust-toolchain@nightly
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: "true"
    - name: Check docs
      run: RUSTDOCFLAGS="--cfg docsrs -D warnings" cargo +nightly doc --workspace --all-features --no-deps
  build-wasm:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: "true"
    - name: Install wasm32-unknown-unknown toolchain
      run: rustup target add wasm32-unknown-unknown
    - name: Build on wasm32-unknown-unknown
      run:
        cargo check -p generic-ec --target wasm32-unknown-unknown --features all-curves
    - name: Install wasm-pack
      uses: baptiste0928/cargo-install@v1
      with:
        crate: wasm-pack
    - name: wasm-pack an example project
      run: (cd wasm/wasm-example; wasm-pack build)
  build-wasm-nostd:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: "true"
    - name: Install wasm32-unknown-unknown toolchain
      run: rustup target add wasm32-unknown-unknown
    - name: Build on wasm32-unknown-unknown (no_std)
      run:
        (cd wasm/nostd && cargo build -p nostd-example --target wasm32-unknown-unknown)
  check-publish:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package:
        - generic-ec
        - generic-ec-core
        - generic-ec-curves
        - generic-ec-zkp
    steps:
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: "true"
    - name: Dry-run publish
      run: cargo publish --dry-run -p ${{ matrix.package }}
  check-semver:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package:
        - generic-ec
        - generic-ec-core
        - generic-ec-curves
        - generic-ec-zkp
        feature-group:
        - all-features
        - only-explicit-features
    steps:
    - uses: actions/checkout@v3
    - name: Check semver
      uses: obi1kenobi/cargo-semver-checks-action@v2
      with:
        package: ${{ matrix.package }}
        feature-group: ${{ matrix.feature-group }}
  check-changelog:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Check changelogs
      run: ./.github/changelog.sh
